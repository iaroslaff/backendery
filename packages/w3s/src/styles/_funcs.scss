@import "./types";

/**
 * Checks if the given container type is supported. This function verifies whether the
 * provided container type is within the list of supported container types.
 *
 * @param {string} $value - The container type to check.
 * @return {boolean} - Returns true if the container type is supported, otherwise false.
 * @throws {error} - Throws an error if the provided value is not a string.
 *
 * @example
 * // returns true
 * $result: is-container-supported("less");
 *
 * @example
 * // returns false
 * $result: is-container-supported("unknown");
 */
@function is-container-supported ($value) {
  @if type-of($value) != "string" {
    @error "the value <#{$value}> is not a string";
  }

  @if index($supported-container-type, $value) {
    @return true;
  }

  @return false;
}

/**
 * Checks if a CSS value contains a supported unit.
 * This function determines whether the provided value includes
 * any of the supported units of measurement.
 *
 * @param {string | number} $value - The CSS value to check for units.
 * @return {boolean} - Returns true if a supported unit is found, otherwise false.
 * @throws {error} - Throws an error if the provided value is not a string.
 *
 * @example
 * // returns true
 * $result: has-unit("16px");
 *
 * @example
 * // returns false
 * $result: has-unit("16");
 */
@function has-unit ($value) {
  @if type-of($value) != "string" {
    $value: #{$value};
  }

  @each $unit in $supported-unit-type {
    @if (str-index($value, $unit) != null) {
      @return true;
    }
  }

  @return false;
}

/**
 * Removes the unit from a CSS value, returning the numeric part. This function extracts
 * the numeric part from a CSS value by removing the unit, if the unit is supported.
 *
 * @param {string} $value - The CSS value from which to remove the unit.
 * @return {number} - The numeric part of the value without the unit.
 * @throws {error} - Throws an error if no unit is found or if the unit is not in the list of supported units.
 *
 * @example
 * // returns 16
 * $result: remove-unit("16px");
 *
 * @example
 * // throws an error: no unit found in value
 * $result: remove-unit("16");
 *
 * @example
 * // throws an error: unsupported unit found in value
 * $result: remove-unit("16dp");
 */
@function remove-unit ($value) {
  @if type-of($value) != "string" {
    $value: #{$value};
  }

  @if has-unit($value) {
    @each $unit in $supported-unit-type {
      @if (str-index($value, $unit) != null) {
        $unitLength: str-length($unit);

        @return str-slice($value, 1, -$unitLength - 1);
      }
    }
  }

  @error "the unit of value <#{$value}> is not supported or missing";
}
